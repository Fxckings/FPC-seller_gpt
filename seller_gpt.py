import subprocess
import sys, requests
import importlib

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é pip
def install_package(package_name: str):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ g4f, –µ—Å–ª–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ
try:
    import g4f
except ImportError:
    install_package("g4f")
    install_package("g4f[webdriver]")
    g4f = importlib.import_module("g4f")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –ø–∞–∫–µ—Ç–∞ prophet
try:
    import prophet
except ImportError:
    install_package("prophet")
    prophet = importlib.import_module("prophet")

from typing import TYPE_CHECKING, Optional, Tuple, Dict, Union, List
from cardinal import Cardinal
if TYPE_CHECKING:
    from cardinal import Cardinal

from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent
from FunPayAPI.types import MessageTypes
import logging
import telebot
import json
import os, re
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
from urllib.parse import urlparse, parse_qs
from locales.localizer import Localizer
import g4f
from tg_bot import CBT
import tg_bot.CBT
from g4f.client import Client
from g4f.Provider import Groq, You

logger = logging.getLogger("FPC.GPTPLUG-IN")
localizer = Localizer()
_ = localizer.translate

LOGGER_PREFIX = "GPT-SELLER"
logger.info(f"{LOGGER_PREFIX} –ó–ê–ü–£–°–¢–ò–õ–°–Ø!")

NAME = "ChatGPT-Seller"
VERSION = "0.0.5"
DESCRIPTION = """
–ü–ª–∞–≥–∏–Ω, —á—Ç–æ–±—ã —á–∞—Ç-–≥–ø—Ç –æ—Ç–≤–µ—á–∞–ª –∑–∞ –≤–∞—Å, —Ç–∞–∫-–∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–Ω—è—Ç—ã —Ö–∑:)
_CHANGE LOG_
0.0.2 - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Ç–≥
0.0.3 - –¥–æ—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
0.0.4 - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Ç–≥++
0.0.5 - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–≥
"""
CREDITS = "@zeijuro"
UUID = "a707de90-d0b5-4fc6-8c42-83b3e0506c73"
SETTINGS_PAGE = True

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∫–æ–Ω–æ–∫
CHECK_MARK = "‚úÖ"
CROSS_MARK = "‚ùå"
BELL = "üîî"
NO_BELL = "üîï"

USERNAME = "Tinkovof"

CONFIG_FILE = "storage/plugins/GPTseller.json" #–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥
BLACKLIST_FILE = "storage/cache/blacklist.json" #–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ß–°

g4f.debug.logging = True
g4f.debug.version_check = True

#–ü–æ–ª—É—á–∞—Ç—å —Å —Å–∞–π—Ç–∞: https://groq.com/
groqapi = "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"

SETTINGS = {
    "groqapi": groqapi,
    "send_response": True,
    "black_list_handle": True,
    "notify_telegram": True,
    "notify_chatid": 0,
    "username": USERNAME,
    "prompt": ""
}

SETTINGS['prompt'] = f"""–¢—ã - –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ {SETTINGS['username']} –Ω–∞ —Å–∞–π—Ç–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π FunPay.
–ü–æ–º–æ–≥–∞–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–∞–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ù–û —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–∞–∫ –∏ –≥–æ–≤–æ—Ä–∏.
"""

#–ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
client = Client(api_key=SETTINGS["groqapi"])

#Switch
CBT_SWITCH = "CBTSWITCH"
#Prompt
CBT_PROMPT_CHANGE = "NEW_PROMPT"
CBT_PROMPT_EDITED = "PROMPT_EDITED"
#Name
CBT_NAME_CHANGE = "NAME_CHANGE_CBT"
CBT_NAME_EDITED = "NAME_EDITED_CBT"
#Groq
CBT_API_CHANGE = "NEW_API_GROQ"
CBT_API_EDITED = "GROQ_API_EDITED"
#Check Udated
CHECK_UPDATES = "CHECK_NEW_VERVION"

lot_cache: Dict[int, Dict[str, Optional[str]]] = {}

def save_file(file_path: str, data: Union[List, Dict]) -> None:
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except (IOError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

def log_order_info(order):
    try:
        logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω: {order}")
        logger.info(f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount}")
    except Exception as e:
        logger.error(e)

def order_logger(c: Cardinal, e: NewOrderEvent):
    try:
        order = e.order
        log_order_info(order)
    except Exception as e:
        logger.error(e)

def cache_lot_info(chat_id: int, ru_full_lot_info: Optional[str], ru_title_lot_info: Optional[str], price_of_lot: Optional[str]):
    try:
        lot_cache[chat_id] = {
            "ru_full_lot_info": ru_full_lot_info,
            "ru_title_lot_info": ru_title_lot_info,
            "price_of_lot": price_of_lot
        }
    except Exception as e:
        logger.error(e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ git, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
def install_git():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "gitpython"])
        import git
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ git: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å GitHub
def check_and_update_package(github_repo: str):
    try:
        response = requests.get(f"https://api.github.com/repos/{github_repo}/releases/latest")
        response.raise_for_status()
        latest_version = response.json()['tag_name']
        
        current_version = VERSION # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è VERSION –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        
        if latest_version != current_version:
            download_file_from_github(github_repo, "seller_gpt.py")
            return f"–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {latest_version}."
        else:
            return "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é."
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"

def download_file_from_github(repo_url: str, file_path: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
    
    :param repo_url: URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub.
    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    :return: None
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API GitHub
    file_url = f"https://raw.githubusercontent.com/{repo_url}/main/{file_path}"
    response = requests.get(file_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    response.raise_for_status()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, 'wb') as f:
        f.write(response.content)

def get_cached_lot_info(chat_id: int) -> Optional[Dict[str, Optional[str]]]:
    try:
        return lot_cache.get(chat_id)
    except Exception as e:
        logger.error(e)
        return None

def load_file(file_path: str) -> Union[List, Dict, None]:
    if not os.path.exists(file_path):
        logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    return None

def log_message_info(c: Cardinal, message) -> bool:
    try:
        bot_username = c.account.username
        logger.info(f"–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {message.author}, –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞: {bot_username}")

        if message.type != MessageTypes.NON_SYSTEM or message.author_id == c.account.id:
            return False

        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {message.text}")
        return True
    except Exception as e:
        logger.error(e)
        return False

def load_blacklist(file_path: str) -> List[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :return: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    :raises FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
    :raises json.JSONDecodeError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        raise e
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ {file_path}.")
        raise e

def is_user_blacklisted(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –∏–Ω–∞—á–µ False.
    """
    try:
        blacklist = load_blacklist(BLACKLIST_FILE)
        return username in blacklist
    except FileNotFoundError:
        return False
    except json.JSONDecodeError:
        return False
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        return False

def sanitize_response(response: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞.

    :param response: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    :return: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    """
    unwanted_chars = "*#‚Ññ%/@$%^&<>[]"
    for char in unwanted_chars:
        response = response.replace(char, "")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response = re.sub(r'http[s]?://\S+', '', response)
    response = re.sub('<br>', '', response)
    
    return response

def generate_response(messages: list, model: str, provider: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    :param messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏.
    :param model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    :param provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏.
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        response = client.chat.completions.create(
            model=model,
            provider=provider,
            messages=messages
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é {model} –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {provider}: {e}")
        return None

def create_response(chat_id: int, ru_full_lot_info: Optional[str], ru_title_lot_info: Optional[str], 
                    price_of_lot: Optional[str], message_text: str, prompt: str) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :param ru_full_lot_info: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ.
    :param ru_title_lot_info: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.
    :param price_of_lot: –¶–µ–Ω–∞ –ª–æ—Ç–∞.
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param prompt: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        messages = [
            {"role": "system", "content": prompt}
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cached_info = get_cached_lot_info(chat_id)
        if cached_info:
            ru_full_lot_info = cached_info["ru_full_lot_info"]
            ru_title_lot_info = cached_info["ru_title_lot_info"]
            price_of_lot = cached_info["price_of_lot"]
        else:
            cache_lot_info(chat_id, ru_full_lot_info, ru_title_lot_info, price_of_lot)

        if ru_full_lot_info:
            messages += [
                {"role": "assistant", "content": f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {ru_title_lot_info}"},
                {"role": "assistant", "content": f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞: {ru_full_lot_info}"},
                {"role": "assistant", "content": f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_of_lot}‚ÇΩ"},
                {"role": "user", "content": "–Ø –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?"},
                {"role": "assistant", "content": f"–î–∞, –∫–æ–Ω–µ—á–Ω–æ!"},
                {"role": "user", "content": message_text},
            ]
        else:
            messages += [
                {"role": "user", "content": "–Ø –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä?"},
                {"role": "assistant", "content": f"–î–∞, –∫–æ–Ω–µ—á–Ω–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ!"},
                {"role": "user", "content": message_text},
            ]

        response = generate_response(messages, model="gpt-4", provider=You)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        if not response:
            response = generate_response(messages, model="", provider=Groq)
            if not response:
                return None

        sanitized_response = sanitize_response(response)
        return sanitized_response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return None

def message_logger(c: Cardinal, e: NewMessageEvent) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param c: –û–±—ä–µ–∫—Ç Cardinal.
    :param e: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        message = e.message
        handle_message(c, message.chat_id, message.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def handle_message(c: Cardinal, chat_id: int, message_text: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç.

    :param c: –û–±—ä–µ–∫—Ç Cardinal.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    ru_full_lot_info, ru_title_lot_info, price_of_lot = get_info(c, chat_id)
    response = create_response(chat_id, ru_full_lot_info, ru_title_lot_info, price_of_lot, message_text, SETTINGS["prompt"])

    if ru_full_lot_info:
        log_lot_info(ru_full_lot_info, ru_title_lot_info, price_of_lot)

    c.send_message(chat_id, response)
    notify_telegram(c, response, message_text)

def log_lot_info(ru_full_lot_info: str, ru_title_lot_info: str, price_of_lot: str) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ.

    :param ru_full_lot_info: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ.
    :param ru_title_lot_info: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.
    :param price_of_lot: –¶–µ–Ω–∞ –ª–æ—Ç–∞.
    """
    logger.info(f"–ª–æ—Ç {ru_full_lot_info}")
    logger.info(f"–æ–ø–∏—Å {ru_title_lot_info}")
    logger.info(f"—Ü–µ–Ω–∞ {price_of_lot}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –≤ —Ç–µ–∫—Å—Ç–µ
def contains_url(text: str) -> bool:
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.search(url_pattern, text) is not None

def bind_to_new_message(c: Cardinal, e: NewMessageEvent):
    try:
        if SETTINGS["send_response"]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if is_user_blacklisted(e.message.chat_name):
                if SETTINGS['black_list_handle'] == False:
                    logger.info(f"{e.message.chat_name} –≤ –ß–°!")
                    return

            msg = e.message

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not log_message_info(c, msg):
                return

            # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–ª–æ–≤
            if msg.text.startswith(("!", "/", "https://", "t.me", "#", "–¥–∞", "+", "–î–∞", "–¥–ê")):
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            if len(msg.text) < 10 or len(msg.text.split()) < 2:
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if contains_url(msg.text):
                return

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_logger(c, e)
    except Exception as e:
        logger.error(e)

def parse_lot_id(url: str) -> Optional[str]:

    """
    –ü–∞—Ä—Å–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞ –∏–∑ URL.

    :param url: –°—Ç—Ä–æ–∫–∞ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    :return: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        lot_id = query_params.get('id', [None])[0]
        return lot_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL: {e}")
        return None

def get_lot_fields(cardinal, lot_id: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param lot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ None.
    """
    try:
        return cardinal.account.get_lot_fields(lot_id)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞: {e}")
        return None

def get_lot_information(cardinal, lot_id: str) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param lot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ª–æ—Ç–∞. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è None.
    """
    lot_data = get_lot_fields(cardinal, lot_id)
    if lot_data:
        description = lot_data.get('description_ru')
        title = lot_data.get('title_ru')
        price = lot_data.get('price')
        
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        logger.info(f"–¶–µ–Ω–∞: {price}")
        
        return description, title, price
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –¥–ª—è lot_id: {lot_id}")
        return None, None, None

def get_user_chat_data(cardinal, chat_id: int) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ None.
    """
    try:
        return cardinal.account.get_chat(chat_id)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞: {e}")
        return None

def get_info(cardinal, chat_id: int) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –∏ —Ü–µ–Ω—É. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è None.
    """
    try:
        user_data = get_user_chat_data(cardinal, chat_id)

        if not user_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id: {chat_id}")
            return None, None, None

        if user_data.get('looking_link'):
            lot_id = parse_lot_id(user_data['looking_link'])
            if lot_id:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ—Ç: {lot_id}")
                return get_lot_information(cardinal, lot_id)

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ—Ç")
        return None, None, None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None, None, None

def notify_telegram(c: Cardinal, responce, question):
    bot = c.telegram.bot

    if SETTINGS["notify_telegram"]:
        message = (
            f"<b>–í–æ–ø—Ä–æ—Å:</b> <code>{question}<code>\n\n"
            f"<b>–û—Ç–≤–µ—Ç:</b> <code>{responce}</code>"
        )

        bot.send_message(c.telegram.authorized_users[0], f"üíª <b>{LOGGER_PREFIX}</b>\n\n{message}", parse_mode='HTML')

def init(c: Cardinal):
    os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)

    global SETTINGS

    save_file(CONFIG_FILE, SETTINGS)

    tg = c.telegram
    bot = tg.bot

    def switch(call: telebot.types.CallbackQuery):
        try:
            setting_key = call.data.split(":")[1]
            if setting_key in SETTINGS:
                SETTINGS[setting_key] = not SETTINGS[setting_key]
                save_config()
                settings(call)
        except Exception as e:
            logger.error(e)

    def save_config():
        try:
            with open(CONFIG_FILE, "w", encoding="UTF-8") as f:
                f.write(json.dumps(SETTINGS, indent=4, ensure_ascii=False))
        except Exception as e:
            logger.error(e)

    def settings(call: telebot.types.CallbackQuery) -> None:
        try:
            keyboard = K()

            # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            keyboard.add(B("üöß –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data=CBT_PROMPT_CHANGE))
            keyboard.add(B("üöß –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=CBT_NAME_CHANGE))
            keyboard.add(B("üöß –ò–∑–º–µ–Ω–∏—Ç—å Groq Api", callback_data=CBT_API_CHANGE))

            # Helper function to create icon buttons
            def create_icon_button(label, setting_key, switch_key):
                icon = CHECK_MARK if SETTINGS[setting_key] else CROSS_MARK
                return [
                    B(label, callback_data=f"{CBT_SWITCH}:{switch_key}"),
                    B(icon, callback_data=f"{CBT_SWITCH}:{switch_key}_icon")
                ]

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            keyboard.row(*create_icon_button("–í–∫–ª—é—á–µ–Ω:", 'send_response', 'send_response'))

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            keyboard.row(*create_icon_button("–û—Ç–≤–µ—á–∞—Ç—å –ß–°–Ω–∏–∫–∞–º:", 'black_list_handle', 'black_list_handle'))

            # –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ telegram
            keyboard.row(*create_icon_button("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", 'notify_telegram', 'notify_telegram'))

            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            keyboard.row(B("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data=CHECK_UPDATES))

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard.row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))

            message_text = (
                "‚ö†Ô∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–≥–∏–Ω.\n"
                f"üöΩ –ï—Å–ª–∏ —á–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: {CREDITS}\n"
            )

            bot.edit_message_text(
                message_text, 
                call.message.chat.id, 
                call.message.id, 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(e)

    def handle_update(call: telebot.types.CallbackQuery):
        try:
            github_repo = "alex117815/FPC-seller_gpt"  # repo
            update_message = check_and_update_package(github_repo)

            bot.answer_callback_query(call.id, text=update_message)
        except Exception as e:
            logger.error(e)
            bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ Telegram –±–æ—Ç–∞.")

    def toggle_send_response(call: telebot.types.CallbackQuery):
        try:
            SETTINGS["notify_chatid"] = call.message.chat.id
            SETTINGS["send_response"] = not SETTINGS.get("send_response", False)
            save_config()
            settings(call)
        except Exception as e:
            logger.error(e)

    def toggle_notify_telegram(call: telebot.types.CallbackQuery):
        try:
            SETTINGS["notify_chatid"] = call.message.chat.id
            SETTINGS["notify_telegram"] = not SETTINGS.get("notify_telegram", False)
            save_config()
            settings(call)
        except Exception as e:
            logger.error(e)

    def toggle_handle_black_listed_users(call: telebot.types.CallbackQuery):
        try:
            SETTINGS["notify_chatid"] = call.message.chat.id
            SETTINGS["black_list_handle"] = not SETTINGS.get("black_list_handle", False)
            save_config()
            settings(call)
        except Exception as e:
            logger.error(e)

    def edit(call: telebot.types.CallbackQuery):
        result = bot.send_message(call.message.chat.id,
                                f"<b>üåà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {SETTINGS['prompt']}\n\n"
                                f"üîΩ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç üîΩ",
                                reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
        tg.set_state(call.message.chat.id, result.id, call.from_user.id,
                    f"{CBT_PROMPT_EDITED}")
        bot.answer_callback_query(call.id)

    def edited_key(message: telebot.types.Message):
        text = message.text
        key = "prompt"
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ message.text —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            if not isinstance(text, str) or len(text) == 0:
                raise ValueError("üî¥ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞")
            new_prompt_key = text
        except ValueError as e:
            logger.info(e)
            bot.reply_to(message, f"üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
            return
        tg.clear_state(message.chat.id, message.from_user.id, True)
        keyboard = K().row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        SETTINGS[key] = new_prompt_key
        save_config()
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {new_prompt_key}", reply_markup=keyboard)

    def edit_username(call: telebot.types.CallbackQuery):
        result = bot.send_message(call.message.chat.id,
                                f"<b>üåà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {SETTINGS['username']}\n\n"
                                f"üîΩ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ üîΩ",
                                reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
        tg.set_state(call.message.chat.id, result.id, call.from_user.id,
                    f"{CBT_NAME_EDITED}")
        bot.answer_callback_query(call.id)

    def edited_username(message: telebot.types.Message):
        text = message.text
        key = "username"
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ message.text —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            if not isinstance(text, str) or len(text) == 0:
                raise ValueError("üî¥ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞")
            new_prompt_key = text
        except ValueError as e:
            logger.info(e)
            bot.reply_to(message, f"üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
            return
        tg.clear_state(message.chat.id, message.from_user.id, True)
        keyboard = K().row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        SETTINGS[key] = new_prompt_key
        save_config()
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {new_prompt_key}", reply_markup=keyboard)

    def edit_api(call: telebot.types.CallbackQuery):
        result = bot.send_message(call.message.chat.id,
                                f"<b>üåà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {SETTINGS['groqapi']}\n\n"
                                f"Api –±—Ä–∞—Ç—å —Å —Å–∞–π—Ç–∞: https://groq.com/"
                                f"üîΩ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π api üîΩ",
                                
                                reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
        tg.set_state(call.message.chat.id, result.id, call.from_user.id,
                    f"{CBT_API_EDITED}")
        bot.answer_callback_query(call.id)

    def edited_api(message: telebot.types.Message):
        text = message.text
        key = "groqapi"
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ message.text —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            if not isinstance(text, str) or len(text) == 0:
                raise ValueError("üî¥ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç groqapi")
            new_prompt_key = text
        except ValueError as e:
            logger.info(e)
            bot.reply_to(message, f"üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=tg_bot.static_keyboards.CLEAR_STATE_BTN())
            return
        tg.clear_state(message.chat.id, message.from_user.id, True)
        keyboard = K().row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        SETTINGS[key] = new_prompt_key
        save_config()
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {new_prompt_key}", reply_markup=keyboard)

    #–ú–µ–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç
    tg.cbq_handler(edit, lambda c: CBT_PROMPT_CHANGE in c.data)
    tg.msg_handler(edited_key, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_PROMPT_EDITED}"))
    #–ú–µ–Ω—è—Ç—å –Ω–∏–∫
    tg.cbq_handler(edit_username, lambda c: CBT_NAME_CHANGE in c.data)
    tg.msg_handler(edited_username, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_NAME_EDITED}"))
    #Groq api
    tg.cbq_handler(edit_api, lambda c: CBT_API_CHANGE in c.data)
    tg.msg_handler(edited_api, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_API_EDITED}"))
    #–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    tg.cbq_handler(toggle_send_response, lambda c: f"{CBT_SWITCH}:send_response" in c.data)
    tg.cbq_handler(toggle_handle_black_listed_users, lambda c: f"{CBT_SWITCH}:black_list_handle" in c.data)
    tg.cbq_handler(toggle_notify_telegram, lambda c: f"{CBT_SWITCH}:notify_telegram" in c.data)
    #–°–µ—Ç—Ç–∏–Ω–≥—Å
    tg.cbq_handler(switch, lambda c: CBT_SWITCH in c.data)
    tg.cbq_handler(settings, lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data)
    #Updates
    tg.cbq_handler(handle_update, lambda c: CHECK_UPDATES in c.data)

#–ë–∏–Ω–¥—ã
BIND_TO_NEW_MESSAGE = [bind_to_new_message]
BIND_TO_DELETE = None
BIND_TO_PRE_INIT = [init]
