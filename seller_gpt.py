import subprocess
import sys, requests
import importlib

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é pip
def install_package(package_name: str):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])

install_package('numpy==1.26.4')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –ø–∞–∫–µ—Ç–∞ prophet
try:
    import Groq
    import g4f
    import curl_cffi
    import prophet
    import numpy
except ImportError:
    install_package("groq")
    install_package("g4f")
    install_package('curl_cffi')
    install_package('prophet')
    install_package('numpy')
    groq = importlib.import_module("groq")
    g4f = importlib.import_module("g4f")
    curl_cffi = importlib.import_module("curl_cffi")
    prophet = importlib.import_module("prophet")

from typing import TYPE_CHECKING, Optional, Tuple, Dict, Union, List
from cardinal import Cardinal
if TYPE_CHECKING:
    from cardinal import Cardinal

from FunPayAPI.updater.events import NewMessageEvent
from FunPayAPI.types import MessageTypes
import logging
from os.path import exists
import telebot
import json
import os, re
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
from urllib.parse import urlparse, parse_qs
from locales.localizer import Localizer
from tg_bot import CBT
from groq import Groq
from g4f.Provider import You
from g4f.client import Client

logger = logging.getLogger("FPC.ChatGPT-Seller")
localizer = Localizer()
_ = localizer.translate

LOGGER_PREFIX = "ChatGPT-Seller"
logger.info(f"{LOGGER_PREFIX} –ê–∫—Ç–∏–≤–µ–Ω")

NAME = "ChatGPT-Seller"
VERSION = "0.0.7"
DESCRIPTION = """
–ü–ª–∞–≥–∏–Ω, —á—Ç–æ–±—ã —á–∞—Ç-–≥–ø—Ç –æ—Ç–≤–µ—á–∞–ª –∑–∞ –≤–∞—Å, —Ç–∞–∫-–∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–Ω—è—Ç—ã —Ö–∑:)
_CHANGE LOG_
0.0.7 - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç)
"""
CREDITS = "@cloudecode"
UUID = "a707de90-d0b5-4fc6-8c42-83b3e0506c73"
SETTINGS_PAGE = True

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∫–æ–Ω–æ–∫
CHECK_MARK = "‚úÖ"
CROSS_MARK = "‚ùå"
BELL = "üîî"
NO_BELL = "üîï"

SETTINGS = {
    "api_key": "",
    "send_response": True,
    "black_list_handle": True,
    "prompt": "–¢—ã - –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–∞–π—Ç–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π FunPay. –ü–æ–º–æ–≥–∞–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–∞–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ù–û —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–∞–∫ –∏ –≥–æ–≤–æ—Ä–∏."
}

BAD_WORDS = {
    'ggfunpay',
    'zelenka',
    '–∑–µ–ª–µ–Ω–∫–∞',
    '–ø–æ—Ä–Ω–æ',
    'playerok',
    '–ø–ª–µ–µ—Ä–æ–∫'
}

#Switch
CBT_SWITCH = "CBTSWITCH"
#Prompt
CBT_PROMPT_CHANGE = "NEW_PROMPT"
CBT_PROMPT_EDITED = "PROMPT_EDITED"
#Groq
CBT_API_CHANGE = "NEW_API_GROQ"
CBT_API_EDITED = "GROQ_API_EDITED"
#Check Udated
CHECK_UPDATES = "CHECK_NEW_VERVION"

lot_cache: Dict[int, Dict[str, Optional[str]]] = {}


def cache_lot_info(chat_id: int, ru_full_lot_info: Optional[str], ru_title_lot_info: Optional[str], price_of_lot: Optional[str]):
    try:
        lot_cache[chat_id] = {
            "ru_full_lot_info": ru_full_lot_info,
            "ru_title_lot_info": ru_title_lot_info,
            "price_of_lot": price_of_lot
        }
    except Exception as e:
        logger.error(e)

def get_latest_release_info(github_repo: str) -> Optional[dict]:
    try:
        response = requests.get(f"https://api.github.com/repos/{github_repo}/releases/latest")
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"Failed to get the latest release info: {e}")
        return None

def download_file_from_github(download_url: str, file_path: str) -> bool:
    try:
        with requests.get(download_url, stream=True) as response:
            response.raise_for_status()
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
        logger.info(f"File successfully downloaded and saved to: {file_path}")
        return True
    except requests.RequestException as e:
        logger.error(f"Error downloading file: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False

def check_and_update_package(github_repo: str, file_name: str) -> str:
    release_info = get_latest_release_assets(github_repo)
    if not release_info:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ."

    latest_version, assets = release_info
    asset = next((a for a in assets if a['name'] == file_name), None)
    if VERSION == latest_version:
        return f"–í–µ—Ä—Å–∏—è {latest_version} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–ª–∏–∑–æ–º."

    if asset:
        base_dir = os.path.dirname(__file__)
        file_path = os.path.join(base_dir, file_name)

        if download_file_from_github(asset['browser_download_url'], file_path):
            return f"–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {latest_version}."
        else:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞."
    else:
        logger.info(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ.")
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ."


def get_latest_release_assets(github_repo: str) -> Optional[Tuple[str, List[dict]]]:
    try:
        response = requests.get(f"https://api.github.com/repos/{github_repo}/releases/latest")
        response.raise_for_status()
        release_info = response.json()
        return release_info['tag_name'], release_info.get('assets', [])
    except requests.RequestException as e:
        logger.error(f"Failed to get the latest release info: {e}")
        return None

def check_if_need_update() -> bool:
    try:
        release_info = get_latest_release_info("alex117815/FPC-seller_gpt")
        return release_info and release_info['tag_name'] > VERSION
    except Exception:
        return False

def get_cached_lot_info(chat_id: int) -> Optional[Dict[str, Optional[str]]]:
    return lot_cache.get(chat_id)

def load_file(file_path: str) -> Union[List, Dict, None]:
    try:
        with open(file_path, 'rb') as f:
            return json.loads(f.read().decode('utf-8'))
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    return None

def log_message_info(c: Cardinal, message) -> bool:
    """
    –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏

    :param c: The Cardinal instance.
    :param message: The message to log.
    :return: True if the message was logged successfully, False otherwise.
    """
    try:
        bot_username = c.account.username
        logger.info(f"–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {message.author}, –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞: {bot_username}")

        if message.type != MessageTypes.NON_SYSTEM or message.author_id == c.account.id:
            return False

        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {message.text}")
        return True
    except Exception as e:
        logger.error(e)
        return False

def sanitize_response(response: str) -> str:
    """
    –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, —Å—Å—ã–ª–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞.

    :param response: The original response text.
    :return: The cleaned response text.
    """

    # –£–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    response = re.sub(r'[*\#‚Ññ%/@$%^&<>[\]]', '', response)
    response = re.sub(r'\b({})\b'.format('|'.join(BAD_WORDS)), '', response)

    # –£–¥–∞–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏ HTML-—Ç–µ–≥–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response = re.sub(r'(http[s]?://\S+|<br>|<h1>|<h2>|<h3>|<p>|</p>)', '', response)

    return response

def generate_response(messages: list, model: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    :param messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏.
    :param model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        response = Groq(api_key=SETTINGS["api_key"]).chat.completions.create(
            model=model,
            messages=messages,
            temperature=0
        )
        if response.choices[0].message.content:
            return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error generating a response with the Groq client: {e}")

    try:
        response = Client().chat.completions.create(
            model="claude-3-opus",
            messages=messages,
            temperature=0
        )
        if response.choices[0].message.content:
            return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error generating a response with the You client: {e}")

    return None

def create_response(chat_id: int, ru_full_lot_info: Optional[str], ru_title_lot_info: Optional[str], 
                    price_of_lot: Optional[str], message_text: str, prompt: str) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :param ru_full_lot_info: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ.
    :param ru_title_lot_info: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.
    :param price_of_lot: –¶–µ–Ω–∞ –ª–æ—Ç–∞.
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param prompt: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        messages = [
            {"role": "system", "content": prompt}
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cached_info = get_cached_lot_info(chat_id)
        if cached_info:
            ru_full_lot_info = cached_info["ru_full_lot_info"]
            ru_title_lot_info = cached_info["ru_title_lot_info"]
            price_of_lot = cached_info["price_of_lot"]
        else:
            cache_lot_info(chat_id, ru_full_lot_info, ru_title_lot_info, price_of_lot)

        if ru_full_lot_info:
            messages += [
                {"role": "assistant", "content": f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {ru_title_lot_info}"},
                {"role": "assistant", "content": f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞: {ru_full_lot_info}"},
                {"role": "assistant", "content": f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_of_lot}‚ÇΩ"},
                {"role": "user", "content": "–Ø –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?"},
                {"role": "assistant", "content": f"–î–∞, –∫–æ–Ω–µ—á–Ω–æ!"},
                {"role": "user", "content": message_text},
            ]
        else:
            messages += [
                {"role": "user", "content": "–Ø –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä?"},
                {"role": "assistant", "content": f"–î–∞, –∫–æ–Ω–µ—á–Ω–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ!"},
                {"role": "user", "content": message_text},
            ]
        response = generate_response(messages, model="llama3-70b-8192")
        sanitized_response = sanitize_response(response)
        return sanitized_response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return None

def message_logger(c: Cardinal, e: NewMessageEvent) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param c: –û–±—ä–µ–∫—Ç Cardinal.
    :param e: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        message = e.message
        handle_message(c, message.chat_id, message.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def handle_message(c: Cardinal, chat_id: int, message_text: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç.

    :param c: –û–±—ä–µ–∫—Ç Cardinal.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    ru_full_lot_info, ru_title_lot_info, price_of_lot = get_info(c, chat_id)
    response = create_response(chat_id, ru_full_lot_info, ru_title_lot_info, price_of_lot, message_text, SETTINGS["prompt"])

    if ru_full_lot_info:
        log_lot_info(ru_full_lot_info, ru_title_lot_info, price_of_lot)

    c.send_message(chat_id, response)

def log_lot_info(ru_full_lot_info: str, ru_title_lot_info: str, price_of_lot: str) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ.

    :param ru_full_lot_info: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ.
    :param ru_title_lot_info: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.
    :param price_of_lot: –¶–µ–Ω–∞ –ª–æ—Ç–∞.
    """
    logger.info(f"–ª–æ—Ç {ru_full_lot_info}")
    logger.info(f"–æ–ø–∏—Å {ru_title_lot_info}")
    logger.info(f"—Ü–µ–Ω–∞ {price_of_lot}")

def contains_url(text: str) -> bool:
    """
    –ï—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –¥–∞ - —É–¥–∞–ª—è–µ–º
    """
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.search(url_pattern, text) is not None

def bind_to_new_message(c: Cardinal, e: NewMessageEvent):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    :param c: The Cardinal instance.
    :param e: The NewMessageEvent instance.
    """
    try:
        if SETTINGS["send_response"]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if e.message.chat_name in c.blacklist:
                if SETTINGS['black_list_handle'] == False:
                    logger.info(f"{e.message.chat_name} –≤ –ß–°!")
                    return

            msg = e.message
            msg = msg.text.lower()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not log_message_info(c, msg):
                return

            # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–ª–æ–≤
            if msg.text.startswith(("!", "/", "https://", "t.me", "#", "–¥–∞", "+", "–î–∞", "–¥–ê", 'no', '-', "–Ω–µ—Ç")):
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ --> –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            if len(msg.text) < 10 or len(msg.text.split()) < 2:
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if contains_url(msg.text):
                return

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_logger(c, e)
    except Exception as e:
        logger.error(e)

def parse_lot_id(url: str) -> Optional[str]:
    """
    –ü–∞—Ä—Å–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞ –∏–∑ URL.

    :param url: –°—Ç—Ä–æ–∫–∞ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    :return: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        lot_id = query_params.get('id', [None])[0]
        return lot_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL: {e}")
        return None

def get_lot_fields(cardinal, lot_id: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param lot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ None.
    """
    try:
        return cardinal.account.get_lot_fields(lot_id)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞: {e}")
        return None

def get_lot_information(cardinal, lot_id: str) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param lot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ª–æ—Ç–∞. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è None.
    """
    lot_data = get_lot_fields(cardinal, lot_id)
    if lot_data:
        description = lot_data.get('description_ru')
        title = lot_data.get('title_ru')
        price = lot_data.get('price')
        
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        logger.info(f"–¶–µ–Ω–∞: {price}")
        
        return description, title, price
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –¥–ª—è lot_id: {lot_id}")
        return None, None, None

def get_user_chat_data(cardinal, chat_id: int) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∞—á–µ None.
    """
    try:
        return cardinal.account.get_chat(chat_id)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞: {e}")
        return None

def get_info(cardinal, chat_id: int) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ.

    :param cardinal: –û–±—ä–µ–∫—Ç cardinal –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
    :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –∏ —Ü–µ–Ω—É. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è None.
    """
    try:
        user_data = get_user_chat_data(cardinal, chat_id)

        if not user_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id: {chat_id}")
            return None, None, None

        if user_data.get('looking_link'):
            lot_id = parse_lot_id(user_data['looking_link'])
            if lot_id:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ—Ç: {lot_id}")
                return get_lot_information(cardinal, lot_id)

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ—Ç")
        return None, None, None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None, None, None

def init(c: Cardinal):
    tg = c.telegram
    bot = tg.bot

    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    can_update = check_if_need_update()
    if can_update:
        bot.send_message(c.telegram.authorized_users[0], f'üö® –í–Ω–∏–º–∞–Ω–∏–µ!\n–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ {LOGGER_PREFIX}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ')

    if exists("storage/plugins/GPTseller.json"):
        with open("storage/plugins/GPTseller.json", "r", encoding="UTF-8") as f:
            global SETTINGS
            SETTINGS = json.loads(f.read())

    def save_config():
        with open("storage/plugins/GPTseller.json", "w", encoding="UTF-8") as f:
            global SETTINGS
            f.write(json.dumps(SETTINGS, indent=4, ensure_ascii=False))

    def switch(call: telebot.types.CallbackQuery):
        try:
            setting_key = call.data.split(":")[1]
            if setting_key in SETTINGS:
                SETTINGS[setting_key] = not SETTINGS[setting_key]
                save_config()
                settings(call)
        except Exception as e:
            logger.error(e)

    def settings(call: telebot.types.CallbackQuery) -> None:
        try:
            keyboard = K()

            # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            keyboard.add(B("üöß –ò–∑–º–µ–Ω–∏—Ç—å PROMPT", callback_data=CBT_PROMPT_CHANGE))
            keyboard.add(B("üöß –ò–∑–º–µ–Ω–∏—Ç—å api_key", callback_data=CBT_API_CHANGE))

            # Helper function to create icon buttons
            def create_icon_button(label, setting_key, switch_key):
                icon = CHECK_MARK if SETTINGS[setting_key] else CROSS_MARK
                return [
                    B(label, callback_data=f"{CBT_SWITCH}:{switch_key}"),
                    B(icon, callback_data=f"{CBT_SWITCH}:{switch_key}_icon")
                ]

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            keyboard.row(*create_icon_button("–í–∫–ª—é—á–µ–Ω:", 'send_response', 'send_response'))

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            keyboard.row(*create_icon_button("–û—Ç–≤–µ—á–∞—Ç—å –ß–°–Ω–∏–∫–∞–º:", 'black_list_handle', 'black_list_handle'))

            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            keyboard.row(B("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data=CHECK_UPDATES))

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard.row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0"))

            message_text = (
                "‚ö†Ô∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–≥–∏–Ω.\n"
                f"üöΩ –ï—Å–ª–∏ —á–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: {CREDITS}\n"
            )

            bot.edit_message_text(
                message_text, 
                call.message.chat.id, 
                call.message.id, 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(e)

    def handle_update(call: telebot.types.CallbackQuery):
        try:
            github_repo = "alex117815/FPC-seller_gpt"
            file_name = "seller_gpt.py"
            update_message = check_and_update_package(github_repo, file_name)
            bot.answer_callback_query(call.id, text=update_message)

            if "–æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏" not in update_message:
                return

            file_path = os.path.abspath(__file__)
            file_path = os.path.join(os.path.dirname(file_path), file_name)

            with open(file_path, 'rb') as file:
                bot.send_chat_action(call.message.chat.id, "upload_document")
                bot.send_document(call.message.chat.id, file, caption="üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n/restart —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ.")
        except Exception as e:
            logger.exception("Error in Telegram bot handler")
            bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ Telegram –±–æ—Ç–∞.")

    def toggle_send_response(call: telebot.types.CallbackQuery):
        try:
            SETTINGS["send_response"] = not SETTINGS.get("send_response", False)
            save_config()
            settings(call)
        except Exception as e:
            logger.error(e)

    def toggle_handle_black_listed_users(call: telebot.types.CallbackQuery):
        try:
            SETTINGS["black_list_handle"] = not SETTINGS.get("black_list_handle", False)
            save_config()
            settings(call)
        except Exception as e:
            logger.error(e)

    def edit_prompt(call: telebot.types.CallbackQuery):
        if call.data != f"{CBT.PLUGIN_SETTINGS}:{UUID}:0":
            msg = bot.send_message(call.message.chat.id, f"–í–∞—à –ø—Ä–æ—à–ª—ã–π PROMPT:<code>{SETTINGS['prompt']}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:")
            bot.register_next_step_handler(msg, edited_prompt)

    def edited_prompt(message: telebot.types.Message):
        try:
            new_prompt = message.text
            SETTINGS["prompt"] = new_prompt
            save_config()
            tg.clear_state(message.chat.id, message.from_user.id, True)
            keyboard = K()
            keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
            bot.reply_to(message, f"üü¢ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{new_prompt}</code>", reply_markup=keyboard)
        except Exception as e:
            bot.delete_message(message.chat.id, message.id)

    def edit_api(call: telebot.types.CallbackQuery):
        if call.data!= f"{CBT.PLUGIN_SETTINGS}:{UUID}:0":
            msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-KEY:")
            bot.register_next_step_handler(msg, edited_api)

    def edited_api(message: telebot.types.Message):
        try:
            new_api_key = message.text
            SETTINGS["api_key"] = new_api_key
            save_config()
            tg.clear_state(message.chat.id, message.from_user.id, True)
            keyboard = K()
            keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
            bot.reply_to(message, f"üü¢ –ù–æ–≤—ã–π API-KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{new_api_key}</code>", reply_markup=keyboard)
        except Exception as e:
            bot.delete_message(message.chat.id, message.id)

    #–ú–µ–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç
    tg.cbq_handler(edit_prompt, lambda c: CBT_PROMPT_CHANGE in c.data)
    tg.msg_handler(edited_prompt, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_PROMPT_EDITED}"))
    #Groq api
    tg.cbq_handler(edit_api, lambda c: CBT_API_CHANGE in c.data)
    tg.msg_handler(edited_api, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, f"{CBT_API_EDITED}"))
    #–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    tg.cbq_handler(toggle_send_response, lambda c: f"{CBT_SWITCH}:send_response" in c.data)
    tg.cbq_handler(toggle_handle_black_listed_users, lambda c: f"{CBT_SWITCH}:black_list_handle" in c.data)
    #–°–µ—Ç—Ç–∏–Ω–≥—Å
    tg.cbq_handler(switch, lambda c: CBT_SWITCH in c.data)
    tg.cbq_handler(settings, lambda c: f"{CBT.PLUGIN_SETTINGS}:{UUID}" in c.data)
    #Updates
    tg.cbq_handler(handle_update, lambda c: CHECK_UPDATES in c.data)

#–ë–∏–Ω–¥—ã
BIND_TO_NEW_MESSAGE = [bind_to_new_message]
BIND_TO_DELETE = None
BIND_TO_PRE_INIT = [init]
